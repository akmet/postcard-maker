name: Release
on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

jobs:
  assets:
    name: Build Assets
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "yarn"
          cache-dependency-path: "yarn.lock"

      - name: install frontend dependencies
        run: yarn install

      - name: build frontend
        run: yarn build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-artifact
          path: dist

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_id: ${{ steps.create_release.outputs.result }}
      version: ${{ steps.get_version.outputs.version}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Git Semantic Version
        id: get_version
        uses: PaulHatch/semantic-version@v5.4.0
        with:
          major_pattern: "(MAJOR|major)"
          minor_pattern: "(MINOR|minor)"
          bump_each_commit: false
          tag_prefix: ""

      - name: create release
        id: create_release
        uses: actions/github-script@v6
        env:
          version: ${{ steps.get_version.outputs.version }}
        with:
          script: |
            const { data } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: `${process.env.version}`,
              name: `Desktop App ${process.env.version}`,
              body: 'Take a look at the assets to download and install this app.',
              draft: true,
              prerelease: false
            })
            return data.id

  build_tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest" # for Arm based macs (M1 and above).
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest" # for Intel based macs.
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04" # for Tauri v1 you could replace this with ubuntu-20.04.
            args: ""
          - platform: "windows-latest"
            args: ""

    needs: [ assets, create_release ]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install tauri-cli
        run: yarn global add @tauri-apps/cli@v2

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-artifact
          path: dist

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_SIGNING_IDENTITY: "-"
        with:
          # Project Initialization
          distPath: "../dist"
          iconPath: "public/postcard.png"
          bundleIdentifier: "de.evjs.postkartentool"
          appName: "PostkartenTool2"
          appVersion: ${{ needs.create_release.outputs.version }}

          # Build Options
          args: ${{ matrix.args }}

          # Release Configuration
          releaseId: ${{ needs.create_release.outputs.release_id }}
          tagName: ${{ needs.create_release.outputs.version }}

  publish-release:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [create_release, build_tauri]

    steps:
      - name: publish release
        id: publish-release
        uses: actions/github-script@v6
        env:
          release_id: ${{ needs.create_release.outputs.release_id }}
        with:
          script: |
            github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: process.env.release_id,
              draft: false,
              prerelease: false
            })
